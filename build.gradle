plugins {
    id 'java'
    id 'eu.xenit.amp' version '1.0.1'
    id 'eu.xenit.alfresco' version '1.0.1'
    id 'de.marcphilipp.nexus-publish' version '0.4.0'
    id "signing"
    id "idea"
}

description = 'Arender amp for Alfresco'
group = 'eu.xenit.transformers'

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    integrationTestCompileClasspath.extendsFrom(compileClasspath)
    integrationTestRuntimeClasspath.extendsFrom(runtimeClasspath)
    integrationTestRuntimeClasspath.extendsFrom(alfrescoProvided)
}

def baseVersion = '1.0.2'
def branchName = System.env.TRAVIS_BRANCH
def isRelease = branchName != null && branchName.startsWith("release")
if (isRelease)
    version = "$baseVersion"
else
    version = "$baseVersion-SNAPSHOT"

sourceCompatibility = "1.8"

repositories {
    mavenCentral()
    alfrescoPublic()
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test, group: "verification") {
    useJUnitPlatform()
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    onlyIf { project.hasProperty("arender.address") }
    doFirst {
        systemProperty("arender.address", project.property("arender.address"))
    }
}

check.dependsOn(integrationTest);

pluginManager.withPlugin("idea") {
    idea {
        module {
            testSourceDirs += sourceSets.integrationTest.java.sourceDirectories
            testResourceDirs += sourceSets.integrationTest.resources.srcDirs
        }
    }
}

dependencies {
    alfrescoProvided("org.alfresco:alfresco-repository:5.1.e") {
        exclude group: "org.springframework.social"
    }

    integrationTestImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.4.2'
    )
    integrationTestRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.4.2',
    )
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        all {
            pom {
                url = 'https://github.com/xenit-eu/Arender4Alfresco'
                name = 'Arender4Alfresco'
                description = "This project aims to allow alfresco to connect and use a remote arender server "

                scm {
                    connection = 'scm:git:git@github.com:xenit-eu/Arender4Alfresco.git'
                    developerConnection = 'scm:git:git@github.com:xenit-eu/Arender4Alfresco.git'
                    url = 'https://github.com/xenit-eu/Arender4Alfresco.git'
                }

                developers {
                    developer {
                        id = "xenit"
                        name = "Xenit Solutions NV"
                    }
                }

                licenses {
                    license {
                        name = 'GNU Lesser General Public License v3.0'
                        url = 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                    }
                }
            }
        }
        mavenJava(MavenPublication) {
            artifact amp
            artifact sourcesJar
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.env.usernameSonatype
            password = System.env.passwordSonatype
        }
    }

}

signing {
    required { gradle.taskGraph.hasTask("publish") && !version.endsWith('SNAPSHOT') }
    sign publishing.publications.mavenJava
}
gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(publish) && !version.endsWith('SNAPSHOT')) {
        if ((System.env.SIGN_KEY_ID == null) || (System.env.SIGN_SECRET_KEY_RINGFILE == null) || (System.env.SIGN_PASSWORD == null)) {
            throw new GradleException('You need to provide signing params in order to sign artifacts')
        } else {
            ext."signing.keyId" = (System.env.SIGN_KEY_ID != null ? System.env.SIGN_KEY_ID : '')
            ext."signing.secretKeyRingFile" = (System.env.SIGN_SECRET_KEY_RINGFILE != null ? System.env.SIGN_SECRET_KEY_RINGFILE : '')
            ext."signing.password" = (System.env.SIGN_PASSWORD != null ? System.env.SIGN_PASSWORD : '')
        }
    }
}


